name: docker
concurrency: "${{ github.workflow }}"
permissions:
  contents: write
  packages: write
  issues: write
on:
  workflow_dispatch:
  workflow_call:
  schedule: [{ cron: "0 0 * * *" }]
  push: { paths-ignore: ["README*"] }
  pull_request: { paths-ignore: ["README*"] }

jobs:

  Build:
    name: "${{ github.event.repository.name }}"
    runs-on: ubuntu-latest
    steps:
      - name: checkout the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: login to docker
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: generate metadata via docker
        id: meta
        uses: docker/metadata-action@12cce9efe0d49980455aaaca9b071c0befcdd702
        with:
          images: |-
            ghcr.io/polis-dev/xproxy
          tags: |-
            # branch event
            type=ref,event=branch
            # tag event
            type=ref,event=tag
            # pull request event
            type=ref,event=pr

      - uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325

      - uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5
        id: build-and-push
        with:
          context: "."
          tags: ${{ steps.meta.outputs.tags }}
          push: ${{ github.event_name != 'pull_request' && !startsWith('workflow_', github.event_name) }}
          labels: |-
            org.opencontainers.image.title=${{ github.workflow }}
            org.opencontainers.image.description=${{ github.workflow }} image, baked by github-actions.
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=UNLICENSED

      - run: "#debug github.* context\njq -SreC '.' <<'__JSON_DATA__'\n${{ toJSON(github) }}\n__JSON_DATA__\n"
        if: failure()

      - run: "docker run --rm -it ${{ steps.meta.outputs.tags }} --version"
        if: success()
        continue-on-error: true
